name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEPLOY_ENVIRONMENT_NAME: ${{ vars.DEPLOY_ENVIRONMENT_NAME || vars.DEPLOY_ENV || 'host' }}

jobs:
  ssh-test:
    name: Verify SSH connectivity
    runs-on: ubuntu-latest
    environment:
      name: ${{ vars.DEPLOY_ENVIRONMENT_NAME || vars.DEPLOY_ENV || 'host' }}
    env:
      SSH_HOST: ${{ secrets.SSH_HOST || secrets.IP || vars.SSH_HOST || vars.IP }}
      SSH_USER: ${{ secrets.SSH_USER || secrets.USER || vars.SSH_USER || vars.USERNAME || vars.USER }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD || secrets.PASS || secrets.PASSWORD || vars.SSH_PASSWORD || vars.PASS || vars.PASSWORD }}

    steps:
      - name: Validate connection settings
        run: |
          if [ -z "${SSH_HOST}" ]; then
            echo "::error::Missing SSH host. Please define a secret or variable such as SSH_HOST or IP." >&2
            exit 1
          fi
          if [ -z "${SSH_USER}" ]; then
            echo "::error::Missing SSH username. Please define a secret or variable such as SSH_USER or USER." >&2
            exit 1
          fi
          if [ -z "${SSH_PASSWORD}" ]; then
            echo "::error::Missing SSH password. Please define a secret or variable such as SSH_PASSWORD, PASS, or PASSWORD." >&2
            exit 1
          fi

      - name: Test SSH connection
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: 22
          script: |
            echo "SSH connection successful"

      - name: Ensure Nginx is installed and configured
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail

            if command -v sudo >/dev/null 2>&1; then
              SUDO="sudo"
            else
              SUDO=""
            fi

            if ! command -v nginx >/dev/null 2>&1; then
              $SUDO apt-get update
              $SUDO apt-get install -y nginx
            fi

            SITE_CONF="/etc/nginx/sites-available/sphynx-ir"
            SITE_LINK="/etc/nginx/sites-enabled/sphynx-ir"

            $SUDO tee "$SITE_CONF" >/dev/null <<'EOF'
            server {
                listen 80;
                listen [::]:80;
                server_name sphynx.ir www.sphynx.ir _;

                location / {
                    proxy_pass http://127.0.0.1:3003;
                    proxy_http_version 1.1;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                }
            }
            EOF

            $SUDO ln -sf "$SITE_CONF" "$SITE_LINK"

            if [ -e /etc/nginx/sites-enabled/default ]; then
              $SUDO rm -f /etc/nginx/sites-enabled/default
            fi

            $SUDO nginx -t
            $SUDO systemctl enable nginx
            $SUDO systemctl restart nginx

  deploy:
    name: Deploy to sphynx.ir
    runs-on: ubuntu-latest
    needs: ssh-test
    environment:
      name: ${{ vars.DEPLOY_ENVIRONMENT_NAME || vars.DEPLOY_ENV || 'host' }}
    env:
      SSH_HOST: ${{ secrets.SSH_HOST || secrets.IP || vars.SSH_HOST || vars.IP }}
      SSH_USER: ${{ secrets.SSH_USER || secrets.USER || vars.SSH_USER || vars.USERNAME || vars.USER }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD || secrets.PASS || secrets.PASSWORD || vars.SSH_PASSWORD || vars.PASS || vars.PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare deployment archive
        run: |
          set -euo pipefail

          ARCHIVE_PATH="${RUNNER_TEMP}/deploy.tar.gz"

          rm -rf node_modules
          rm -f "$ARCHIVE_PATH" deploy.tar.gz

          tar czf "$ARCHIVE_PATH" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='deploy.tar.gz' \
            --exclude='deploy.tar.gz.*' \
            .

          mv "$ARCHIVE_PATH" ./deploy.tar.gz

      - name: Upload archive to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: 22
          source: "deploy.tar.gz"
          target: "~/deployments"

      - name: Deploy on remote host
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: 22
          script: |
            set -euo pipefail

            ARCHIVE_DIR="$HOME/deployments"
            ARCHIVE_NAME="deploy.tar.gz"
            ARCHIVE_PATH="$ARCHIVE_DIR/$ARCHIVE_NAME"
            APP_DIR="$HOME/apps/sphynx.ir"
            APP_NAME="sphynx-ir"

            mkdir -p "$ARCHIVE_DIR"

            if command -v sudo >/dev/null 2>&1; then
              SUDO="sudo"
            else
              SUDO=""
            fi

            export DEBIAN_FRONTEND=noninteractive
            export APT_LISTCHANGES_FRONTEND=none

            UPDATED=0
            apt_update_once() {
              if [ "$UPDATED" -eq 0 ]; then
                $SUDO apt-get update -o Dpkg::Use-Pty=0
                UPDATED=1
              fi
            }

            apt_install() {
              apt_update_once
              $SUDO apt-get install -y -o Dpkg::Use-Pty=0 "$@"
            }

            if ! command -v curl >/dev/null 2>&1; then
              apt_install curl
            fi

            if ! command -v node >/dev/null 2>&1; then
              apt_install ca-certificates gnupg
              curl -fsSL https://deb.nodesource.com/setup_20.x | $SUDO bash -
              apt_install nodejs
            fi

            if ! command -v setcap >/dev/null 2>&1; then
              apt_install libcap2-bin
            fi

            if ! command -v pm2 >/dev/null 2>&1; then
              $SUDO npm install -g pm2
            fi

            if command -v pm2 >/dev/null 2>&1 && pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              pm2 stop "$APP_NAME"
              pm2 delete "$APP_NAME"
            fi

            rm -rf "$APP_DIR"
            mkdir -p "$APP_DIR"
            tar -xzf "$ARCHIVE_PATH" -C "$APP_DIR" --strip-components=1
            rm -f "$ARCHIVE_PATH"

            cd "$APP_DIR"
            npm install
            npm run build

            if [ -n "$SUDO" ]; then
              NODE_BIN="$(command -v node || true)"
              if [ -n "$NODE_BIN" ]; then
                $SUDO setcap 'cap_net_bind_service=+ep' "$NODE_BIN" || true
              fi
            fi

            APP_PORT=3003

            pm2 start npm --name "$APP_NAME" -- run start -- --hostname 0.0.0.0 --port "$APP_PORT"
            if [ -n "$SUDO" ]; then
              $SUDO pm2 startup systemd -u "$(whoami)" --hp "$HOME" || true
            fi
            pm2 save
                        
            if command -v nginx >/dev/null 2>&1; then
              if command -v systemctl >/dev/null 2>&1; then
                $SUDO systemctl reload nginx || $SUDO systemctl restart nginx || true
              else
                $SUDO nginx -s reload || $SUDO service nginx reload || true
              fi
            fi
